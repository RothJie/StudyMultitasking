多线程：threading,利用CPU和IO能同时执行的原理，不在让CPU慢慢等待IO完成。
多进程：multiprocessing,利用多核CPU的能力，真正的并行执行任务。
异步IO：asyncio,在单线程基础上利用CPU和IO同时执行的原理，实现函数异步执行。

使用Lock对资源加锁，防止冲突访问。
使用Queue实现不同线程/进程之间的数据通信,实现生产者和消费者模式
使用线程池Pool/进程池Pool,简化线程/进程的任务提交、等待结束、获取结果。
使用subprocess启动外部程序的进程，进行输入输出交互。

1、什么是CPU密集型计算、I0密集型计算?
CPU密集型CPU-bound
CPU密集型也叫计算密集型，是指I/0在很短的时间就可以完成，CPU需要大量的计算和处理，特点是CPU占用率相当高例如:压缩解压缩、加密解密、正则表达式搜索
IO密集型(IO bound)
I0密集型指的是系统运作大部分的状况是CPU在等I/0(硬盘/内存)的读/写操作，CPU占用率仍然较低
例如:文件处理程序、网络爬虫程序、读写数据库程序

2、多线程、多进程、多协程的对比
一个进程可以启用多个线程，一个线程能同时启动多个协程。

多进程 Process(multiprocessing)
优点:可以利用多核CPU并行运算
缺点:占用资源最多、可启动数目比线程少
适用于:CPU密集型计算

多线程 Thread (threading)
优点:相比进程，占用资源少更轻里级
缺点:
相比进程:多线程只能并发执行，不能利用多CPU(GIL)
相比协程:启动数目有限制，占用内存资源，有线程切换开销,适用于I0密集型计算、同时运行的任务数自要求不多

多协程 Coroutine(asyncio)
优点:内存开销最少、启动协程数量最多
缺点:支持的库有限制(aiohttp vs requests)代码实现复杂,适用于:I0密集型计算需要超多任务运行、但有现成库支持的场景

GIL 是什么?
局解释器锁(英语:GlobalInterpreter Lock，缩写GIL书是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行即便在多核心处理器上，使用 GIL 的解释器也只允许同一时间执行一个线程。